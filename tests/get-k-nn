#!/usr/bin/env python3

from scipy import spatial
import struct
import sys

def knn(pts, queries, k):
    tree = spatial.KDTree(pts)
    knns = []
    for query in queries:
        res = tree.query([query],k)
        indices = res[1][0]
        knn = []
        knn.append(query)
        knn.append([])
        for i in indices:
            knn[1].append(pts[i])
        knns.append(knn)
    return knns

def readFile(filename):
    pts = []
    with open(filename,"rb") as f:
        name = f.read(8).decode("utf-8").rstrip('\0')
        fileid = struct.unpack('Q',f.read(8))[0]
        numpts = struct.unpack('Q',f.read(8))[0]
        numdim = struct.unpack('Q',f.read(8))[0]
        if name == "QUERY":
            k = struct.unpack('Q',f.read(8))[0]
        else:
            k = -1
        for i in range(numpts):
            pt = []
            for j in range(numdim):
                val = struct.unpack('f',f.read(4))[0]
                pt.append(val)
            pts.append(tuple(pt))
    if name == 'TRAINING':
        return (pts, numdim)
    else:
        return (pts, k, numdim)

pts, ptsd = readFile(sys.argv[1])
queries, k, queriesd = readFile(sys.argv[2])
assert ptsd == queriesd
knns = knn(pts, queries, k)

print("Points:")
for pt in pts:
    print('\t'+str(pt))

print("Queries:")
for q in queries:
    print('\t'+str(q))

print("k-NNs:")
for knn in knns:
    print('\tk-NN of query '+str(knn[0]))
    for n in knn[1]:
        print('\t\t'+str(n))

