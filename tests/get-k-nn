#!/usr/bin/python

from scipy import spatial
import struct
import sys

def getUniqueFileID():
    f = open('/dev/urandom','rb')
    uniqueid = struct.unpack('=Q',f.read(8))[0]
    f.close()
    return uniqueid

def knn(pts, queries, k):
    tree = spatial.KDTree(pts)
    knns = []
    for query in queries:
        res = tree.query([query],k)
        indices = res[1][0]
        knn = []
        for i in indices:
            knn.append(pts[i])
        knns.append(knn)
    return knns

def readFile(filename):
    pts = []
    with open(filename,"rb") as f:
        name = f.read(8).decode("utf-8").rstrip('\0')
        fileid = struct.unpack('Q',f.read(8))[0]
        numpts = struct.unpack('Q',f.read(8))[0]
        numdim = struct.unpack('Q',f.read(8))[0]
        if name == "QUERY":
            k = struct.unpack('Q',f.read(8))[0]
        else:
            k = -1
        for i in range(numpts):
            pt = []
            for j in range(numdim):
                val = struct.unpack('f',f.read(4))[0]
                pt.append(val)
            pts.append(tuple(pt))
    if name == 'TRAINING':
        return (pts, fileid)
    else:
        return (pts, fileid, k)

def writeFile(knns,trainingid,queryid):
    fileid = getUniqueFileID()
    resultfilename = "result_" + str(fileid) + ".dat"
    with open(resultfilename,"wb") as rf:
        rf.write("RESULT")
        rf.write(struct.pack("=h",0))
        rf.write(struct.pack("=Q",trainingid))
        rf.write(struct.pack("=Q",queryid))
        rf.write(struct.pack("=Q",fileid))
        rf.write(struct.pack("=Q",len(knns)))		# number of queries
        rf.write(struct.pack("=Q",len(knns[0][0])))	# number of dimensions
        rf.write(struct.pack("=Q",len(knns[0])))	# k
        buff = str()
        for knn in knns:
            for n in knn:
                for d in n:
                    buff+=struct.pack("=f",d)
        rf.write(buff)

pts, trainingid = readFile(sys.argv[1])
queries, queryid, k = readFile(sys.argv[2])

assert len(pts[0]) == len(queries[0])

knns = knn(pts, queries, k)
writeFile(knns, trainingid, queryid)
